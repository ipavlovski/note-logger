generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model Node {
    id Int @id @default(autoincrement())

    pid      Int?
    parent   Node?  @relation("NodeChain", fields: [pid], references: [id], onDelete: Cascade)
    children Node[] @relation("NodeChain")

    uri   String @unique
    title String

    iconId Int?
    icon   Icon? @relation(fields: [iconId], references: [id])

    backsplashId Int?
    backsplash   Backsplash? @relation(fields: [backsplashId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    order     Int      @default(0)

    tags     Tag[]
    metadata Metadata[]
    leafs    Leaf[]
    history  History[]
}

model Tag {
    id     Int    @id @default(autoincrement())
    name   String
    pid    Int?      
    parent Tag?   @relation("TagChain", fields: [pid], references: [id])
    child  Tag[]   @relation("TagChain")
    node   Node[]
    order  Int    @default(0)

    @@unique([pid, name], name: "tag_chain")
}

// key, value, type - type is Number/String/Boolean of the 'value'
model Metadata {
    id      Int    @id @default(autoincrement())
    node_id Int
    key     String
    value   String
    type    String
    node    Node   @relation(fields: [node_id], references: [id])

    @@unique([node_id, key], name: "metadata_key")
}

model Leaf {
    id        Int      @id @default(autoincrement())
    node_id   Int
    node      Node     @relation(fields: [node_id], references: [id])
    media     Image[]
    content   String
    createdAt DateTime @default(now())
    order     Int      @default(0)
}

model Image {
    id      Int   @id @default(autoincrement())
    leaf_id Int
    leaf    Leaf? @relation(fields: [leaf_id], references: [id])

    path      String
    source    String?
    createdAt DateTime @default(now())
    order     Int      @default(0)

    @@unique([leaf_id, path], name: "image_path")
}

model Icon {
    id   Int    @id @default(autoincrement())
    node Node[]

    path   String @unique
    source String? @unique
}

model Backsplash {
    id   Int    @id @default(autoincrement())
    node Node[]

    path   String @unique
    source String? @unique
}

model History {
    id         Int      @id @default(autoincrement())
    node_id    Int
    visited_at DateTime @unique
    imported_at DateTime @default(now())
    node       Node     @relation(fields: [node_id], references: [id])
}
